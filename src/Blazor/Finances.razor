@page "/finances"

@using Humanizer
@using Conesoft.Files
@using Conesoft_Website_Kontrol.Tools

<PageTitle>Finances Kontrol</PageTitle>

<AuthorizeView Roles="CanSeeFinances">
    <Authorized>
        <section id="layout">
            <section id="list">
                <div>
                    @{
                        var years = Entries.GroupBy(e => e.At.Year).OrderBy(e => e.Key).ToArray();
                    }
                    @foreach (var year in years)
                    {
                        <details open="@(year == years.Last())">
                            <summary>@year.Key</summary>
                            @{
                                var months = year.GroupBy(e => e.At.Month).OrderBy(e => e.Key).ToArray();
                            }
                            <ul class="months">
                                @foreach (var month in months)
                                {
                                    <li>
                                        <details open="@(month == months.Last())">
                                            <summary>
                                                @System.Globalization.CultureInfo.GetCultureInfo("en-CA").DateTimeFormat.GetMonthName(month.Key)
                                            </summary>

                                            <ul class="entries">
                                                @foreach (var entry in month.OrderBy(e => e!.At))
                                                {
                                                    <li class="@entry.Type.ToString().ToLower()">
                                                        <p class="label">@entry.Description</p>
                                                        <i class="date">@entry.At.ToLongDateString()</i>
                                                        @if (entry.For != null)
                                                        {
                                                            <i class="who">for @entry.For</i>
                                                        }
                                                        @if (entry.By != null && entry.To != null)
                                                        {
                                                            <i id="who">
                                                                by
                                                                <span>@entry.By</span>
                                                                to
                                                                <span>@entry.To</span>
                                                            </i>
                                                        }
                                                        <b class="value">@entry.Amount CHF</b>
                                                    </li>
                                                }
                                            </ul>
                                        </details>
                                    </li>
                                }
                            </ul>
                        </details>
                    }
                </div>
            </section>

            <section id="compensation" class="compensation">
                @if (OpenAmount > 10)
                {
                    <h1>Open amount by Caleigh</h1>
                    <b style="font-size: 2em">@OpenAmount.ToString("0.00") CHF</b>
                }
                else if (OpenAmount < -10)
                {
                    <h1>Prepaid amount by Caleigh</h1>
                    <b style="font-size: 2em">@((-OpenAmount).ToString("0.00")) CHF</b>
                }
                else
                {
                    <h1>No open Amount by Caleigh</h1>
                }
            </section>

            <section id="form">
                <h1>New Entry</h1>
                <EditForm Model="New" Context="AddEntryFormContext" OnSubmit="AddEntry">
                    <fieldset horizontal>
                        <legend>entry type</legend>
                        <InputRadioGroup @bind-Value="New.Type">
                            <label><InputRadio Value="EntryType.Bill" />Bill</label>
                            <label><InputRadio Value="EntryType.Income" />Income</label>
                            <label><InputRadio Value="EntryType.Compensation" />Compensation</label>
                        </InputRadioGroup>
                    </fieldset>
                    <fieldset>
                        <legend>date of receipt</legend>
                        <InputDate @bind-Value="New.At" />
                        <fieldset horizontal>
                            <InputRadioGroup @bind-Value="New.Every">
                                <label><InputRadio Value="RepetitionType.NoRepetition" />no repetition</label>
                                <label><InputRadio Value="RepetitionType.Month" />every month</label>
                            </InputRadioGroup>
                        </fieldset>
                    </fieldset>
                    <fieldset horizontal>
                        <legend>description</legend>
                        <InputText @bind-Value="New.Description" />
                    </fieldset>
                    <fieldset horizontal>
                        <legend>amount (in chf)</legend>
                        <InputNumber style="font-size: 2em" @bind-Value="New.Amount" />
                    </fieldset>
                    <fieldset horizontal>
                        <legend>money received by</legend>
                        <InputRadioGroup @bind-Value="New.For">
                            <label><InputRadio Value="@("davepermen")" />Davepermen</label>
                            <label><InputRadio Value="@("caleighc")" />CaleighC</label>
                        </InputRadioGroup>
                    </fieldset>
                    <input type="submit" value="add new entry">
                </EditForm>
            </section>
        </section>

    </Authorized>
    <NotAuthorized>
        <section>
            <h1>Finances</h1>
            <p>Nothing to see here, please log in with authorized user</p>
        </section>
    </NotAuthorized>
</AuthorizeView>

@code {
    enum EntryType { Invalid, Bill, Income, Compensation }
    enum RepetitionType { NoRepetition, Month }
    record Entry(EntryType Type, DateTime At, string Description, decimal Amount, RepetitionType Every, string? For, string? By, string? To);
    record EditableEntry()
    {
        public EntryType Type { get; set; } = EntryType.Invalid;
        public DateTime At { get; set; } = DateTime.Today;
        public string Description { get; set; } = "";
        public decimal Amount { get; set; } = 0;
        public RepetitionType Every { get; set; } = RepetitionType.NoRepetition;
        public string For { get; set; } = "";
    }


    List<Entry> Entries = new();
    EditableEntry New = new();
    decimal OpenAmount = 0;

    Conesoft.Files.Directory Storage = Conesoft.Hosting.Host.LocalStorage / "Finances";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var _ = InvokeAsync(async () =>
        {
            await foreach (var changes in Storage.Live().Changes())
            {
                if (changes.ThereAreChanges || changes.FirstRun)
                {
                    Entries = (await Task.WhenAll(changes.All.Where(f => f.Extension == ".json").Select(async f => await f.WhenReady.ReadFromJson<Entry>()))).NotNull().ToList();

                    // SUMME([Bill Amount])*SUMME([Salary Caleigh])/ (SUMME([Salary Dave]) + SUMME([Salary Caleigh]))-SUMME([Transferred by Caleigh])
                    var AllBills = Entries.Where(e => e.Type == EntryType.Bill).Sum(e => e.Amount);
                    var SalaryCaleigh = Entries.Where(e => e.Type == EntryType.Income && e.For == "caleighc").Sum(e => e.Amount);
                    var SalaryDave = Entries.Where(e => e.Type == EntryType.Income && e.For == "davepermen").Sum(e => e.Amount);
                    var TransferredByCaleigh = Entries.Where(e => e.Type == EntryType.Compensation && e.By == "caleighc" && e.To == "davepermen").Sum(e => e.Amount);

                    OpenAmount = AllBills * SalaryCaleigh / (SalaryDave + SalaryCaleigh) - TransferredByCaleigh;

                    StateHasChanged();
                }
            }
        });
    }

    protected async Task AddEntry()
    {
        var every = New.Type == EntryType.Bill ? New.Every : RepetitionType.NoRepetition;
        var for_ = New.Type == EntryType.Income ? New.For : null;
        var by = New.Type == EntryType.Compensation ? "caleighc" : null;
        var to = New.Type == EntryType.Compensation ? "davepermen" : null;

        var entry = new Entry(Type: New.Type, At: New.At, Description: New.Description, Amount: New.Amount, Every: every, For: for_, By: by, To: to);

        var name = entry.Type.ToString() + " " + entry.Description + " " + entry.At.ToString("yyyy-MM-dd");
        var file = File.From("");
        var i = 0;
        do
        {
            file = Storage / Filename.From(name + (i > 0 ? $" ({i})" : ""), "json");
            i++;
        } while (file.Exists);

        await file.WriteAsJson(entry);
    }
}