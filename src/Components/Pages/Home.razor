@page "/home"
@using Conesoft_Website_Kontrol.Services
@using Q42.HueApi
@using Conesoft.Tools

@inject Tools.User user

@* @inject Conesoft_Website_Kontrol.Services.LightControls lightControls
@inject Conesoft_Website_Kontrol.Services.ClimateSensors climateSensors
 *@
<PageTitle>Home Kontrol</PageTitle>

<main layout="home">
    <section>
@*         @foreach (var room in rooms_)
        {
            <section class="room">
                @if (room.Rooms.FirstOrDefault() is Q42.HueApi.Models.Groups.Group room_ and not null)
                {
                    var roomlights = room_.Lights.Select(l => lights.First(alllights => alllights.Id == l)).ToArray();
                    var anyon = roomlights.Any(l => l.State.On);
                    var __class = anyon ? "on" : "off";
                    var __offline = roomlights.All(l => l.State.IsReachable == false);

                    <button class="wide @__class" disabled="@__offline" @onclick="() => ToggleLights(roomlights, turnOn: anyon == false)">
                        @room.Name
                        @if (room.Sensors.FirstOrDefault() is Readout s and not null)
                        {
                            <br>
                            <text>@(s.Temperature)°C @(s.CO2)ppm @(s.Humidity)%</text>
                        }
                    </button>

                    @if (roomlights.Count() > 1)
                    {
                        @foreach (var light in roomlights)
                        {
                            var _offline = light.State.IsReachable == false;
                            var _class = light.State.On ? "on" : "off";
                            <button class="@_class" disabled="@_offline" @onclick="() => ToggleLight(light)">@light.Name</button>
                        }
                    }
                }
                @if (room.Sensors.FirstOrDefault() is Readout sensor and not null && room.Rooms.FirstOrDefault() == null)
                {
                    <button class="wide" disabled>
                        @sensor.Name - @sensor.Temperature °C - @sensor.CO2 ppm - @sensor.Humidity %
                    </button>
                }
            </section>
        } *@
    </section>
</main>

@code {
    // IReadOnlyCollection<Q42.HueApi.Models.Groups.Group> rooms = Array.Empty<Q42.HueApi.Models.Groups.Group>();
    // IEnumerable<Light> lights = Array.Empty<Light>();

    // IEnumerable<Readout> sensors = Array.Empty<Readout>();

    // record Room(string Name, IEnumerable<Readout> Sensors, IEnumerable<Q42.HueApi.Models.Groups.Group> Rooms);

    // IEnumerable<Room> rooms_ = Array.Empty<Room>();

    // protected override void OnInitialized() => StartRefreshLoop().GetAwaiter();

    // async Task Refresh()
    // {
    //     rooms = await lightControls.GetRooms();
    //     lights = await lightControls.GetLights();

    //     sensors = await climateSensors.GetReadouts().ToArrayAsync();

    //     rooms_ = sensors
    //         .FullOuterGroupJoin(rooms, s => s.Name, r => r.Name, (s, r, name) => new Room(name, s, r))
    //         .Where(r => r.Name.Contains("$") == false);

    //     await InvokeAsync(StateHasChanged);
    // }

    // async Task StartRefreshLoop()
    // {
    //     using var periodicTimer = new PeriodicTimer(TimeSpan.FromMinutes(3.333));
    //     do
    //     {
    //         await Refresh();
    //     } while (await periodicTimer.WaitForNextTickAsync());
    // }

    // async Task ToggleLight(Light light)
    // {
    //     if (await user.IsInRole("CanEditLights"))
    //     {
    //         var command = light.State.On ? new LightCommand().TurnOff() : new LightCommand().TurnOn();
    //         await lightControls.Client.SendCommandAsync(command, new[] { light.Id });

    //         await Refresh();
    //     }
    // }

    // async Task ToggleLights(IEnumerable<Light> lights, bool turnOn)
    // {
    //     if (await user.IsInRole("CanEditLights"))
    //     {
    //         var command = turnOn ? new LightCommand().TurnOn() : new LightCommand().TurnOff();
    //         await lightControls.Client.SendCommandAsync(command, lights.Select(l => l.Id));

    //         await Refresh();
    //     }
    // }
}