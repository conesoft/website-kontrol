@page "/finances"

@using Conesoft_Website_Kontrol.Components.Controls.Finances
@using Humanizer
@using Conesoft.Files
@using Conesoft.Tools
@using Serilog
@using Conesoft.Hosting

@inject HostEnvironment environment

@implements IDisposable

@rendermode InteractiveServer

<PageTitle>Finances Kontrol</PageTitle>

<main class="fit-screen">
    <AuthorizeView Roles="Family">
        <Authorized>
            <List id="list" Entries="@Entries" />
            <OpenAmount id="compensation" Entries="@Entries" />
            <AddNewEntry id="form" />
        </Authorized>
    </AuthorizeView>
</main>

@code {
    List<Controls.Finances.Entry> Entries { get; set; } = new();

    Conesoft.Files.Directory Storage => environment.Local.Storage / "Finances";

    CancellationTokenSource? cts;

    // [CascadingParameter]
    // private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        // var authenticationState = await authenticationStateTask;
        // var user = authenticationState.User;
        // var claims = user.Claims.ToArray();
        if (firstRender)
        {
            var _ = Task.Run(async () =>
            {
                try
                {
                    cts = new();
                    await foreach (var _ in Storage.Live(allDirectories: false, cts.Token))
                    {
                        Entries = (await Task.WhenAll(Storage.Files.Where(f => f.Extension == "json").Select(async f =>
                        {
                            try
                            {
                                var entry = await f.WhenReady.ReadFromJson<Controls.Finances.Entry>();
                                if (entry != null)
                                {
                                    entry.PathToFile = f.Path;
                                }
                                return entry;
                            }
                            catch (Exception e)
                            {
                                Log.Error("Exception: {exception}", e);
                                return null;
                            }
                        }))).NotNull().ToList();
                        await InvokeAsync(StateHasChanged);
                    }
                }
                catch (Exception e)
                {
                    Log.Error("Exception: {exception}", e);
                }
            });
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        cts?.Cancel();
    }
}