@using Conesoft.Blazor.NetatmoAuth
@using Conesoft_Website_Kontrol.Features.ClimateSensors.Services
@using Conesoft_Website_Kontrol.Features.LightControls.Services
@using Conesoft_Website_Kontrol.Services
@using Q42.HueApi
@using Conesoft.Tools;
@using Conesoft_Website_Kontrol.Tools.BackgroundInitialization
@using Q42.HueApi.Models.Groups

@rendermode InteractiveServer

<section class="home">
    @foreach (var room in rooms)
    {
        <section class="room">
            @if (room.Rooms.FirstOrDefault() is Q42.HueApi.Models.Groups.Group room_ and not null)
            {
                var roomlights = room_
                .Lights
                .Select(l => lights.First(alllights => alllights.Id == l))
                .Where(l => l.State.IsReachable == true)
                .OrderBy(l => l.Name, new NaturalSortComparer())
                .ToArray()
                ;

                var anyon = roomlights.Any(l => l.State.On);
                var brightness = roomlights.FirstOrDefault()?.State.Brightness / 255d ?? 0;
                var __class = anyon ? "on" : "off";
                var __offline = roomlights.All(l => l.State.IsReachable == false);

                <button class="wide @__class"
                        disabled="@__offline"
                        style=@($"--brightness: {brightness}")
                        @onclick="() => ToggleLights(roomlights, turnOn: anyon == false)"
                        @onpointerdown="() => ButtonDownBegins(roomlights)">
                    @room.Name
                    @if (room.Sensors.FirstOrDefault() is Readout s and not null)
                    {
                        <ul>
                            <li>@(s.Temperature)°C</li>
                            <li>@(s.CO2)ppm</li>
                            <li>@(s.Humidity)%</li>
                        </ul>
                    }
                </button>

                @if (roomlights.Count() > 1)
                {
                    @foreach (var light in roomlights)
                    {
                        var _brightness = light.State.Brightness / 255d;
                        var _class = light.State.On ? "on" : "off";
                        var _offline = light.State.IsReachable == false;

                        <button class="@_class"
                                disabled="@_offline"
                                style=@($"--brightness: {_brightness}")
                                @onclick="() => ToggleLight(light)"
                                @onpointerdown="() => ButtonDownBegins([light])">
                            @light.Name
                        </button>
                    }
                }
            }
            @if (room.Sensors.FirstOrDefault() is Readout sensor and not null && room.Rooms.FirstOrDefault() == null)
            {
                <button class="wide" disabled>
                    @sensor.Name
                    <ul>
                        <li>@(sensor.Temperature)°C</li>
                        @if (sensor.CO2 is not null)
                        {
                            <li>@(sensor.CO2)ppm</li>
                        }
                        <li>@(sensor.Humidity)%</li>
                    </ul>
                </button>
            }
        </section>
    }
</section>

<section class="controls">
    <header>long press room or light to enable brightness control</header>
    <section>
        <input type=range min=0 max=255 step=1
               disabled="@(!inputEnabled)"
               @bind-value=inputRangeValue
               @bind-value:after="RefreshInput">
    </section>
</section>


@code {
    [Parameter]
    public LocalHueClient LocalHueClient { get; set; } = default!;
    [Parameter]
    public ClimateSensors ClimateSensors { get; set; } = default!;

    IEnumerable<Readout> sensors = [];
    IEnumerable<Light> lights = [];

    IEnumerable<Room> rooms = [];


    record Room(string Name, IEnumerable<Readout> Sensors, IEnumerable<Q42.HueApi.Models.Groups.Group> Rooms);

    protected override async Task OnParametersSetAsync()
    {
        sensors = await ClimateSensors.GetReadouts().ToArrayAsync();

        var rooms_ = (await LocalHueClient.GetGroupsAsync()).Where(g => g.Type == Q42.HueApi.Models.Groups.GroupType.Room);
        lights = await LocalHueClient.GetLightsAsync();

        rooms = sensors
            .FullOuterGroupJoin(rooms_, s => s.Name, r => r.Name, (s, r, name) => new Room(name, s, r))
            .Where(r => r.Name.Contains("$") == false);
    }

    DateTime buttonDownBegins = DateTime.MinValue;

    async Task ButtonDownBegins(IEnumerable<Light> lights)
    {
        buttonDownBegins = DateTime.UtcNow;
        currentInput = lights;
        await Task.Delay(TimeSpan.FromSeconds(1));
        if (buttonDownBegins != DateTime.MinValue)
        {
            inputRangeValue = currentInput.Any() ? currentInput.First().State.Brightness : 0;

            inputEnabled = true;
        }
    }

    async Task ToggleLight(Light light)
    {
        if (DateTime.UtcNow - buttonDownBegins <= TimeSpan.FromSeconds(1))
        {
            buttonDownBegins = DateTime.MinValue;

            var command = light.State.On ? new LightCommand().TurnOff() : new LightCommand().TurnOn();
            await LocalHueClient.SendCommandAsync(command, [light.Id]);

            await OnParametersSetAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task ToggleLights(IEnumerable<Light> lights, bool turnOn)
    {
        if (DateTime.UtcNow - buttonDownBegins <= TimeSpan.FromSeconds(1))
        {
            buttonDownBegins = DateTime.MinValue;

            var command = turnOn ? new LightCommand().TurnOn() : new LightCommand().TurnOff();
            await LocalHueClient.SendCommandAsync(command, lights.Select(l => l.Id));

            await OnParametersSetAsync();
            await InvokeAsync(StateHasChanged);
        }
    }


    IEnumerable<Light> currentInput = [];
    double inputRangeValue = 0;
    bool inputEnabled = false;

    async Task RefreshInput()
    {
        var command = new LightCommand() { Brightness = (byte)inputRangeValue };
        command = command.TurnOn();
        await LocalHueClient.SendCommandAsync(command, currentInput.Select(l => l.Id));
        inputEnabled = false;

        await OnParametersSetAsync();
        await InvokeAsync(StateHasChanged);
    }

}