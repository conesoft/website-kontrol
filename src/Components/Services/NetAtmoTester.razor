@page "/netatmotester"
@using Conesoft.Blazor.NetatmoAuth
@using Conesoft_Website_Kontrol.Features.ClimateSensors.Options
@using Conesoft_Website_Kontrol.Features.ClimateSensors.Services
@using Conesoft_Website_Kontrol.Tools.BackgroundInitialization
@using Microsoft.Extensions.Options

@rendermode InteractiveServer

@inject IWhenAvailable<ClimateSensors> climateSensors
@inject IOptions<NetatmoOptions> netAtmoConfiguration

<main>
    <section title="netatmo data">
        <ul>
            @foreach (var readout in readouts)
            {
                    <li><section>@readout.Name @(readout.CO2)ppm @(readout.Temperature)°C @(readout.Humidity)%</section></li>
            }
        </ul>
    </section>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <section title="netatmo tester">
                <NetatmoAuthorization ClientId="@netAtmoConfiguration.Value.ClientId"
                                      ClientSecret="@netAtmoConfiguration.Value.Secret"
                                      Scopes="read_station">
                    <Authorized Context="netatmoContext">
                        <img style="height: 1rem" src="/services/3rd-party/logo-netatmo.png" /> Logout @netatmoContext.Username (in @netatmoContext.Home)
                    </Authorized>
                    <NotAuthorized>
                        <img style="height: 1rem" src="/services/3rd-party/logo-netatmo.png" /> Authorize Netatmo
                    </NotAuthorized>
                </NetatmoAuthorization>
            </section>

        </Authorized>
    </AuthorizeView>
</main>

@code {
    Readout[] readouts = [];

    protected override Task OnInitializedAsync()
    {
        if (RendererInfo.IsInteractive)
        {
            climateSensors.WhenAvailable(this, async my =>
            {
                my.readouts = await my.climateSensors.Instance!.GetReadouts().ToArrayAsync();
                await InvokeAsync(StateHasChanged);
            });
        }
        return Task.CompletedTask;
    }
}